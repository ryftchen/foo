include_guard()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
set(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES OFF)
set(CMAKE_C_STANDARD 20)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_FLAGS_DEBUG "-O0 -g3")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG -fdata-sections -ffunction-sections")
set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -fdata-sections -ffunction-sections")
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "-Wl,--export-dynamic")
set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "-Wl,--gc-sections,--export-dynamic")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "-Wl,--gc-sections,--strip-all")
set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "-Wl,--strip-all")
add_compile_options(-pedantic -Wall -Wextra)
if((CMAKE_C_COMPILER_ID MATCHES "GNU") AND (CMAKE_CXX_COMPILER_ID MATCHES "GNU"))
    add_compile_options(-fdiagnostics-color)
    add_link_options(-fuse-ld=gold)
elseif((CMAKE_C_COMPILER_ID MATCHES "Clang") AND (CMAKE_CXX_COMPILER_ID MATCHES "Clang"))
    add_compile_options(-stdlib=libstdc++ -fcolor-diagnostics)
    add_link_options(-fuse-ld=lld-19)
endif()
set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CMAKE_COMMAND} -E time")
set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK "${CMAKE_COMMAND} -E time")
